windows上第一次运行系统的操作步骤

一、安装配置必要的组件
  MySQL、Redis、MongoDB、Zookeeper、Kafka

二、执行
1.MySQL
CREATE TABLE `VehicleStatusInfor_tbl` (
    `id` INT NOT NULL AUTO_INCREMENT,

    `ResidualMileage` INT NOT NULL,
    `OdographMeter` INT NOT NULL,
    `MaintainMileage` INT NOT NULL,
    `Fuel` SMALLINT NOT NULL,
    `AverageFuleCut` FLOAT NOT NULL,
    `AverageSpeed` INT NOT NULL,
    `VehicleInstantaneousSpeed` DOUBLE NOT NULL,

    `WheelSpeed_FL` DOUBLE NOT NULL,
    `WheelSpeed_FR` DOUBLE NOT NULL,
    `WheelSpeed_RL` DOUBLE NOT NULL,
    `WheelSpeed_RR` DOUBLE NOT NULL,

    `WheelTyrePressure_FL` FLOAT NOT NULL,
    `WheelTyrePressure_FR` FLOAT NOT NULL,
    `WheelTyrePressure_RL` FLOAT NOT NULL,
    `WheelTyrePressure_RR` FLOAT NOT NULL,

    `WheelTyreTemperature_FL` FLOAT NOT NULL,
    `WheelTyreTemperature_FR` FLOAT NOT NULL,
    `WheelTyreTemperature_RL` FLOAT NOT NULL,
    `WheelTyreTemperature_RR` FLOAT NOT NULL,

    `SteeringAngularSpeed` INT NOT NULL,
    `SteeringAngle` INT NOT NULL,

    `thing_id` INT NOT NULL,

    PRIMARY KEY(`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE VehicleStatusInfor_tbl ADD CONSTRAINT VehicleStatusInfor_FK_ID FOREIGN KEY(thing_id) REFERENCES thingbaseinfo_tbl(id);

Ubuntu上部署：
github.com/harveywangdao/road/
go get github.com/Shopify/sarama
go get github.com/bsm/sarama-cluster
go get github.com/garyburd/redigo/redis
go get github.com/go-sql-driver/mysql
go get github.com/jinzhu/gorm
go get gopkg.in/mgo.v2

一、安装配置必要的组件
  MySQL、Redis、MongoDB、Zookeeper、Kafka

二、执行
1.MySQL
1.1 启动MySQL
sudo netstat -tap | grep mysql

mysql -u root -p 
123456

增加设备的数据库：
create database thingsdb;
use thingsdb;

CREATE TABLE `thingbaseinfodata_tbl` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `thingserialno` VARCHAR(29) NOT NULL,
    `prethingaes128key` VARCHAR(16) NOT NULL,
    `thingid` VARCHAR(17) NOT NULL,
    `iccid` VARCHAR(20) NOT NULL,
    `imsi` VARCHAR(15) NOT NULL,
    `status` TINYINT NOT NULL,
    `bid` INT UNSIGNED NOT NULL,
    `thingaes128key` VARCHAR(16) NOT NULL,
    `eventcreationtime` INT UNSIGNED NOT NULL,
    PRIMARY KEY(`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO thingbaseinfodata_tbl (thingserialno,prethingaes128key,thingid,iccid,imsi,status,bid,thingaes128key,eventcreationtime) VALUES (
    "12345678901234567890123456789",
    "1234567890123456",
    "WDDUX52684DFR4582",
    "12345678901234567890",
    "HGTSN12584UHGTE",
    0,
    0,
    "1234567890123456",
    0);



增加iot后台的数据库：
create database iotdb;
use iotdb;

CREATE TABLE `thingbaseinfodata_tbl` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `thingserialno` VARCHAR(29) NOT NULL,
    `prethingaes128key` VARCHAR(16) NOT NULL,
    `thingid` VARCHAR(17) NOT NULL,
    `iccid` VARCHAR(20) NOT NULL,
    `imsi` VARCHAR(15) NOT NULL,
    `status` TINYINT NOT NULL,
    `bid` INT UNSIGNED NOT NULL,
    `thingaes128key` VARCHAR(16) NOT NULL,
    `eventcreationtime` INT UNSIGNED NOT NULL,
    PRIMARY KEY(`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO thingbaseinfodata_tbl (thingserialno,prethingaes128key,thingid,iccid,imsi,status,bid,thingaes128key,eventcreationtime) VALUES (
    "12345678901234567890123456789",
    "1234567890123456",
    "WDDUX52684DFR4582",
    "12345678901234567890",
    "HGTSN12584UHGTE",
    0,
    0,
    "1234567890123456",
    0);


    DBHostIP   = "127.0.0.1:3306"
    DBUsername = "root"
    DBPassword = "123456"
    DriverName = "mysql"

cd ~/golang/src/github.com/harveywangdao/road/scripts/



2.Redis
sudo /etc/init.d/redis-server start

sudo netstat -tap | grep redis

#redis-cli -h 127.0.0.1 -p 6379 -a 123456
#KEYS *
#FLUSHALL
#KEYS *

REDIS_ADDR     = "localhost:6379"

3.MongoDB
sudo service mongodb start

sudo netstat -tap | grep mongod

MgoAddr = "localhost:27017"

4.Zookeeper
zkServer.sh start

zookeeper.connect=localhost:2181

5.Kafka
cd server/kafka_2.12-1.1.0
bin/kafka-server-start.sh config/server.properties

MQAddr = "localhost:9092"

cd server/kafka_2.12-1.1.0
bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 10 --topic WebToGateway
bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 10 --topic GatewayToWeb

bin/kafka-topics.sh --list --zookeeper localhost:2181

bin/kafka-console-producer.sh --broker-list localhost:9092 --topic WebToGateway
#bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic WebToGateway --from-beginning 2>/dev/null

#bin/kafka-console-producer.sh --broker-list localhost:9092 --topic GatewayToWeb
bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic GatewayToWeb --from-beginning 2>/dev/null

cd ~/server/kafka_2.12-1.1.0/logs
rm -rf *
cd /tmp/kafka-logs
rm -rf *

zkServer.sh stop
cd ~/server/zookeeper-3.4.10/data
rm -rf *
cd ~/server/zookeeper-3.4.10/logs
rm -rf *


6.iot
  cd golang/src/github.com/harveywangdao/road/iot
  监听 6023 端口

7.iot_client
  cd golang/src/github.com/harveywangdao/road/iot_client
  thing当前连接 127.0.0.1:6023 端口

8.gRPC & Protobuf
  cd golang/src/github.com/harveywangdao/road/protobuf
  #protoc --go_out=. *.proto
  protoc --go_out=plugins=grpc:. *.proto










